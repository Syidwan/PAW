// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())

  // Relationships
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  userBoards    UserBoard[]
  boards        Board[] @relation("UserBoards")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  price       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Board {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  background  String
  lastAccessed DateTime?

  // Relationship with UserBoard
  userBoards  UserBoard[]
  lists       List[]     @relation("BoardLists") // Removed onDelete from this side

  // Linking User and Boards
  user        User @relation("UserBoards", fields: [userId], references: [id], onDelete: Cascade)
}

model List {
  id          String    @id @default(cuid())
  name        String
  order       Int
  boardId     String

  // Relationship with Board
  board       Board @relation("BoardLists", fields: [boardId], references: [id], onDelete: Cascade)
  cards       Card[]  @relation("ListCards") // Removed onDelete from this side

  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id          String   @id @default(cuid())
  name        String
  order Int
  description String? @db.Text
  attachment  String?
  checklist   String?
  dueDate     DateTime?

  listId      String

  // Relationship with List
  list        List @relation("ListCards", fields: [listId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([listId])
}

model UserBoard {
  id        String @id @default(cuid())
  userId    String
  boardId   String
  ownerId   String

  // Relationships
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  board     Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@map("userboards")
}